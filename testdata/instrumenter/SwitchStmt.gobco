package instrumenter

// https://go.dev/ref/spec#Switch_statements

// TODO: Add systematic tests.

// switchStmt covers the instrumentation of [ast.SwitchStmt], which has the
// expression field Tag, plus several implicit comparisons.
func switchStmt(expr int, cond bool, s string) {

	// In switch statements without tag, the tag is implicitly 'true',
	// therefore all expressions in the case clauses must have type bool,
	// therefore they are instrumented.
	switch {
	case GobcoCover(0, expr == 5):
	case GobcoCover(1, cond):
	}

	// No matter whether there is an init statement or not, if the tag
	// expression is empty, the comparisons use the simple form and are not
	// compared to an explicit "true".
	switch s := "prefix" + s; {
	case GobcoCover(2, s == "one"):
	case GobcoCover(3, cond):
	}

	// In a switch statement without tag expression, ensure that complex
	// conditions in the case clauses are not instrumented redundantly.
	switch a, b := cond, GobcoCover(4, !cond); {
	case (GobcoCover(5, a && b)):
	case (GobcoCover(6, a || b)):
	}

	// No initialization, the tag is a plain identifier.
	// The instrumented code could directly compare the tag with the
	// expressions from the case clauses.
	// It doesn't do so, to keep the instrumenting code simple.
	{
		gobco0 := s
		switch {
		case GobcoCover(7, gobco0 == "one"),
			GobcoCover(8, gobco0 == "two"),
			GobcoCover(9, gobco0 == "three"):
		}
	}

	// In switch statements with a tag expression, the expression is
	// evaluated exactly once and then compared to each expression from
	// the case clauses.
	{
		gobco1 := s + "suffix"
		switch {
		case GobcoCover(10, gobco1 == "one"),
			GobcoCover(11, gobco1 == "two"),
			GobcoCover(12, gobco1 == ""+s):
		}
	}

	// In a switch statement with an init statement, the init statement
	// happens before evaluating the tag expression.
	{
		s = "prefix" + s
		gobco2 := s + "suffix"
		switch {
		case GobcoCover(13, gobco2 == "prefix.a.suffix"):
		}
	}

	// In a switch statement with an init variable definition, the
	// variable is defined in a separate scope, and the initialization
	// statement happens before evaluating the tag expression.
	{
		s := "prefix" + s
		gobco3 := s + "suffix"
		switch {
		case GobcoCover(14, gobco3 == "prefix.a.suffix"):
		}
	}

	// The statements from the initialization are simply copied, there is no
	// need to handle assignments of multi-valued function calls differently.
	{
		a, b := (func() (string, string) { return "a", "b" })()
		gobco4 := cond
		switch {
		case GobcoCover(15, gobco4 == true):
			a += b
			b += a
		}
	}

	// Switch statements that contain a tag expression and an
	// initialization statement are wrapped in an outer block.
	// In this case, the block would not be necessary since the
	// gobco variable name does not clash with the code that is
	// instrumented.
	ch := make(chan<- int, 1)
	{
		ch <- 3
		gobco5 := expr
		switch {
		case GobcoCover(16, gobco5 == 5):
		}
	}

	// In the case clauses, there may be complex conditions.
	// In the case of '!a', the condition 'a' is already instrumented,
	// so instrumenting '!a' seems redundant at first.
	// The crucial point is that it's not the value of 'a' alone that
	// decides which branch is taken, but instead 'cond == a'.
	{
		a, b := cond, GobcoCover(17, !cond)
		gobco6 := cond
		switch {
		case GobcoCover(18, gobco6 == a):
		case GobcoCover(19, gobco6 == !a):
		case GobcoCover(20, gobco6 == (GobcoCover(21, !a))):
		case GobcoCover(22, gobco6 == (a && b)):
		case GobcoCover(23, gobco6 == (a && !b)):
		case GobcoCover(24, gobco6 == (a || b)):
		case GobcoCover(25, gobco6 == (!a || b)):
		case GobcoCover(26, gobco6 == (a == b)):
		case GobcoCover(27, gobco6 == (a != b)):
		}
	}

	// In a switch statement, the tag expression may be unused.
	{
		gobco7 := GobcoCover(28, 1 > 0)
		_ = gobco7
		switch {
		}
	}

}

// :15:7: "expr == 5"
// :16:7: "cond"
// :23:7: "s == \"one\""
// :24:7: "cond"
// :29:23: "!cond"
// :30:8: "a && b"
// :31:8: "a || b"
// :39:7: "s == \"one\""
// :40:3: "s == \"two\""
// :41:3: "s == \"three\""
// :48:7: "s + \"suffix\" == \"one\""
// :49:3: "s + \"suffix\" == \"two\""
// :50:3: "s + \"suffix\" == \"\" + s"
// :56:7: "s + \"suffix\" == \"prefix.a.suffix\""
// :63:7: "s + \"suffix\" == \"prefix.a.suffix\""
// :69:7: "cond == true"
// :81:7: "expr == 5"
// :89:23: "!cond"
// :90:7: "cond == a"
// :91:7: "cond == !a"
// :92:7: "cond == (!a)"
// :92:8: "!a"
// :93:7: "cond == (a && b)"
// :94:7: "cond == (a && !b)"
// :95:7: "cond == (a || b)"
// :96:7: "cond == (!a || b)"
// :97:7: "cond == (a == b)"
// :98:7: "cond == (a != b)"
// :102:9: "1 > 0"
