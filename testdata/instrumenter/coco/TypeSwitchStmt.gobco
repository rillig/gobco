package instrumenter

import (
	"reflect"
)

// https://go.dev/ref/spec#Type_switches

// typeSwitchStmt covers the instrumentation of [ast.TypeSwitchStmt], which
// has no expression fields.
//
// A type switch statement contains implicit comparisons that need to be
// instrumented.
func typeSwitchStmt(tag interface{}, value interface{}) string {

	// An empty type switch statement doesn't need to be instrumented.
	switch tag.(type) {
	}

	// The type switch guard can be a simple expression.
	switch tag.(type) {
	default:
	}

	// The type switch guard can be a short variable declaration for a
	// single variable, in which case each branch gets its own declared
	// variable, with the proper type.
	{
		gobco0 := tag
		switch {
		default:
			v := gobco0
			_ = v

			_ = v
		}
	}

	// A type switch statement may have an initialization statement that is
	// evaluated in a nested scope. The type switch tag can be a short
	// variable definition, which has another, nested scope, in each of the
	// case clauses.
	{
		tag := tag
		gobco1 := tag
		switch {
		default:
			tag := gobco1
			_ = tag

			_ = tag
		}
	}

	// Type expressions may be parenthesized:
	{
		gobco2 := tag
		_, gobco3 := gobco2.((int))
		switch {
		case GobcoCover(0, gobco3):
			return "parenthesized " + reflect.TypeOf(tag).Name()
		}
	}

	// Nil may be parenthesized:
	{
		gobco4 := tag
		gobco5 := gobco4 == nil
		switch {
		case GobcoCover(1, gobco5):
			return "parenthesized nil"
		}
	}

	// In case clauses with a single type, the variable has that type.
	// In all other cases, the variable has the type of the guard expression.
	// The type identifier 'nil' matches a nil interface value.
	{
		gobco6 := tag
		_, gobco7 := gobco6.(uint)
		_, gobco8 := gobco6.(uint8)
		_, gobco9 := gobco6.(uint16)
		gobco10 := gobco6 == nil
		switch {
		case GobcoCover(2, gobco7):
			v := gobco6.(uint)
			_ = v

			_ = v + uint(0)
			return "uint " + reflect.TypeOf(v).Name()
		case GobcoCover(3, gobco8), GobcoCover(4, gobco9):
			v := gobco6
			_ = v

			return "any " + reflect.TypeOf(v).Name()
		case GobcoCover(5, gobco10):
			v := gobco6
			_ = v

			// unreachable
			return "nil " + reflect.TypeOf(v).Name()
		}
	}

	// TODO: Test type parameters and generic types.

	{
		_ = GobcoCover(22, 123 > 0)
		gobco11 := value
		_, gobco12 := gobco11.(int)
		_, gobco13 := gobco11.(uint)
		_, gobco14 := gobco11.(string)
		_, gobco15 := gobco11.(struct{})
		_, gobco16 := gobco11.(uint8)
		gobco17 := gobco11 == nil
		_, gobco18 := gobco11.([3]int)
		_, gobco19 := gobco11.([]int)
		_, gobco20 := gobco11.(struct{ field int })
		_, gobco21 := gobco11.(func(int) int)
		_, gobco22 := gobco11.(interface{ ReadByte() (byte, error) })
		_, gobco23 := gobco11.(map[int]int)
		_, gobco24 := gobco11.(chan int)
		_, gobco25 := gobco11.(*int)
		switch {

		case GobcoCover(6, gobco12), GobcoCover(7, gobco13):
			v := gobco11
			_ = v

			// In a clause that lists multiple types, the expression 'v' has the
			// type of the switch tag, in this case 'interface{}'.
			return "integer " + reflect.TypeOf(v).String()

		case GobcoCover(8, gobco14):
			v := gobco11.(string)
			_ = v

			// In a clause that lists a single type, the expression 'v' has the
			// type from the case clause.
			return "string " + reflect.TypeOf(v).String()

		case GobcoCover(9, gobco15):
			v := gobco11.(struct{})
			_ = v

			return "struct{} " + reflect.TypeOf(v).String()

		case GobcoCover(10, gobco16):
			v := gobco11.(uint8)
			_ = v

			// The variable 'v' may be unused in some of the case clauses.
			return "byte"

		case GobcoCover(11, gobco17):
			v := gobco11
			_ = v

			return "nil"

		case GobcoCover(12, gobco18):
			v := gobco11.([3]int)
			_ = v

			return "array of int"

		case GobcoCover(13, gobco19):
			v := gobco11.([]int)
			_ = v

			return "slice of int"

		case GobcoCover(14, gobco20):
			v := gobco11.(struct{ field int })
			_ = v

			return "struct with field"

		case GobcoCover(15, gobco21):
			v := gobco11.(func(int) int)
			_ = v

			return "function taking int and returning int"

		case GobcoCover(16, gobco22):
			v := gobco11.(interface{ ReadByte() (byte, error) })
			_ = v

			return "interface with ReadByte"

		case GobcoCover(17, gobco23):
			v := gobco11.(map[int]int)
			_ = v

			return "map from int to int"

		case GobcoCover(18, gobco24):
			v := gobco11.(chan int)
			_ = v

			return "chan of int"

		case GobcoCover(19, gobco25):
			v := gobco11.(*int)
			_ = v

			return "pointer to int"

		default:
			v := gobco11
			_ = v

			return "other " + reflect.TypeOf(v).String()
		}
	}

}

func typeSwitchStmtMixed(value interface{}) {
	// XXX: The instrumentation does not happen strictly in
	//  declaration order:
	//  All types from the TypeSwitchStmt are instrumented
	//  in a first pass.
	//  All other expressions are instrumented in a second pass.
	{
		gobco0 := value
		_, gobco1 := gobco0.(int)
		_, gobco2 := gobco0.(uint)
		switch {
		case GobcoCover(20, gobco1):
			_ = GobcoCover(23, true) && GobcoCover(24, false)
		case GobcoCover(21, gobco2):
			_ = GobcoCover(25, false) || GobcoCover(26, true)
		}
	}

}

// :44:7: "tag.(type) == (int)"
// :50:7: "tag.(type) == (nil)"
// :58:7: "tag.(type) == uint"
// :61:7: "tag.(type) == uint8"
// :61:14: "tag.(type) == uint16"
// :63:7: "tag.(type) == nil"
// :72:7: "value.(type) == int"
// :72:12: "value.(type) == uint"
// :77:7: "value.(type) == string"
// :82:7: "value.(type) == struct{}"
// :85:7: "value.(type) == uint8"
// :89:7: "value.(type) == nil"
// :92:7: "value.(type) == [3]int"
// :95:7: "value.(type) == []int"
// :98:7: "value.(type) == struct{ field int }"
// :101:7: "value.(type) == func(int) int"
// :104:7: "value.(type) == interface{ ReadByte() (byte, error) }"
// :107:7: "value.(type) == map[int]int"
// :110:7: "value.(type) == chan int"
// :113:7: "value.(type) == *int"
// :128:7: "value.(type) == int"
// :130:7: "value.(type) == uint"
// :70:13: "123 > 0"
// :129:7: "true"
// :129:15: "false"
// :131:7: "false"
// :131:16: "true"
