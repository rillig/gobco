package instrumenter

// https://go.dev/ref/spec#For_statements

// TODO: Add systematic tests.

// rangeStmt covers the instrumentation of [ast.RangeStmt], which has the
// expression fields Key, Value and X.
func rangeStmt(i int) bool {
	mi := map[bool]int{}
	ms := map[bool]string{}
	mr := map[bool]rune{}

	// In a RangeStmt there is no visible condition, therefore nothing
	// is instrumented. It might be possible to distinguish the cases
	// for empty and nonempty sequences, but that would require type
	// analysis, to distinguish between slices and channels.
	//
	// Code that wants to have this check in a specific place can just
	// manually add a condition before the range statement:
	//  _ = len(ms[i > 10]) > 0
	for _, r := range ms[GobcoCover(0, i > 10)] {
		if GobcoCover(1, r == mr[GobcoCover(2, i > 11)]) {
			return true
		}
	}

	// In a range loop using '=', the expressions on the left don't need
	// to be plain identifiers.
	for mi[GobcoCover(3, i > 10)], mr[GobcoCover(4, i > 11)] = range ms[GobcoCover(5, i > 12)] {
	}

	return false
}

// :22:23: "i > 10"
// :23:6: "r == mr[i > 11]"
// :23:14: "i > 11"
// :30:9: "i > 10"
// :30:21: "i > 11"
// :30:40: "i > 12"
